Guanxi::SP

This document describes how to get hold of the Guanxi Service Provider (SP), in binary form or build it from source and configure it.

Contents
  o What is the SP?
  o	The SAML Engine
  o	The Guard
  o	How do the Engine and Guard work together?
  o Getting a binary distribution
  o Building from source
  o Installation
  o Configuration
  o	Configuring the Guard
  o	Configuring the Engine
  o Logging
  o How to embedd the SP in your application
  o More information
  
What is the SP?
-------------------
The SP is the system that protects your web resources. When you try to access a web resource that is protected by the SP, the SP will redirect you to the WAYF, if required, where you can choose your home institution's IdP and when you've authenticated at your IdP, the SP will arrange for your attributes to be delivered to the web resource, which can then make a decision on whether to grant you access.

The SAML Engine
-----------------------
The SAML Engine (Engine) is the heavyweight SP module that takes care of processing the SAML profiles, such as Shibboleth. You can use the same Engine for all your web resources, no matter what machines or domains they are on. There are no restrictions on cross-domain use as security is handled via web services.

The Guard
-------------
The Guard is the lightweight SP module that is used to actually protect a web resource. The Guard doesn't know anything about SAML profiles. It's job is to stand in front of your web resource and block access until the Engine sends it the attributes. It then populates the HTTP headers for your web resource to use. Optionally, you can register a class with the Guard, which the Guard will call when it has received the go ahead from the Engine. This will allow you to prepare for a Shibboleth user coming into your application, such as creating a new account on the fly, adding them to special groups etc.

How do the Engine and Guard work together?
--------------------------------------------------------
It helps to have a diagram for this but this is how the Engine and Guard cooperate to provide Shibboleth cover for your web resources.

The Guard is a servlet filter which sits in front of your web resource and is configured to protect certain URLs at your site. When a user tries to access a Guard protected resource, the Guard blocks the request and then makes a web service call to the Engine. This is for two reasons. The web service call sets up a security session between the Guard and the Engine so that the Engine can match up attributes with Guards. The second reason is that the Guard must know where the WAYF is, to redirect the user to their IdP. When the Engine sets up the security session, it replies to the Guard, returning the location of the institutional or federation WAYF. So the Guard now has a zoned-off area at the Engine and the WAYF location. So, it now redirects the user to the WAYF and they end up at their IdP.

When redirecting to the WAYF, the Guard specifies the Engine as the "shire", to use Shibboleth terminology and it appends it's own unique ID to the shire URL:

http://samlengine.ac.uk/engine.guanxiEngineAuthCS?entityID=666

http://samlengine.ac.uk/engine.guanxiEngineAuthCS is the URL of the Engine Authentication consumer service. This is where the IdP sends it's AuthenticationStatement. ?entityID=666 tells the Engine that it was the Guard identified by "666" that initiated the Shibboleth session. The Engine can then match the session with the Guard's zoned-off area at the Engine.

The IdP won't send the SAML AuthenticationStatement to the Guard. Instead it will send it to the Engine. How does the Engine know what to do with it? Well, the Engine verifies the digital signature coming from the IdP, loads that IdP's metadata and finds out the location of the IdP's Attribute Authority (AA). The Engine then requests attributes based on the SAML Subject that the IdP returned when it authenticated the user. When the attributes arrive at the Engine, the Engine matches them with the Guard and makes a web service call to the Guard, sending it the attributes. If the Guard replies that it got the attributes, the last stage in the process is the Engine then redirects to the Guard's Podder URL which puts all the attributes in a Pod, puts them in the HTTP header, creates a cookie and calls the web application's registered class if so required.

The idea is that an institution can install one SAML Engine and the computing services dept. maintains it, along with the federation metadata. Tutors who have web resource they want to open to external students using Shibboleth just request a pre-configured Guard for their resources from the computing services dept. This Guard will be pre-configured to communicate with a specific Engine.

You can also spread SAML Engines throughout a federation, allowing for load balancing as each Guard will be configured to talk to one Engine in particular. Also, each Engine can be configured with a different WAYF, allowing even more load balancing throughout the federation.

Getting a binary distribution
------------------------------------
You can get a binary distribution, i.e. you don't have to build from source, from the Guanxi sourceforge site:
http://sourceforge.net/projects/guanxi
Click on the "Download Guanxi" button and then click on "guanxi" Package under Latest File Releases. You'll now see a list of the Guanxi components available for download.
Click on the guanxi-sp-bin-xxx.tar.gz file, where xxx will be the latest version number of the SP binary release.
Choose your mirror and the Guanxi SP will be downloaded to your computer.
Uncompress the file and jump over the next section, to the installation notes.

Building from source
---------------------------
You can get the Guanxi source distribution from the Guanxi sourceforge site:
http://sourceforge.net/projects/guanxi
Click on the "Download Guanxi" button and then click on "guanxi" Package under Latest File Releases. You'll now see a list of the Guanxi components available for download.
Click on the guanxi-src-xxx.tar.gz file, where xxx will be the latest version number of the Guanxi source release. As the SP depends on other Guanxi components, there's no separate SP source release. Instead, download the Guanxi system source and the build file will build the SP for you.
Choose your mirror and the Guanxi source will be downloaded to your computer.
Uncompress the file to get the following file structure:

guanxi
-- Common         : Guanxi::Common - contains functionality shared by the Guanxi components
-- IdP                  : Guanxi::IdP - The Guanxi Identity Provider (IdP)
-- SP                   : Guanxi::SP - The Guanxi Service Provider (SP)
-- WAYF             : Guanxi::WAYF - The Guanxi WAYF
-- build.xml         : The Guanxi ant build file
-- gx_lib              : Libraries required by the Guanxi components
-- messages       : Localised text messages for the Guanxi components
-- readme.txt       : The Guanxi readme
-- samuel            : The Guanxi SAMUEL SAML toolkit
-- xsd                  : The Guanxi XML Schema files

You should now go into the guanxi directory and type the following command:

ant sp-engine

This will build the SP Engine and put the files in guanxi/SP/dist/webapp/engine

or

ant sp-guard

This will build the SP Guard and put the files in guanxi/SP/dist/webapp/guard

Installation
---------------
Once you've either downloaded the binary distribution or built the SP from source, you should copy the files, from either the binary directory or guanxi/SP/dist/webapp to your servlet container's webapp root directory. The example uses:

/WWW/samlengine for the Engine

/WWW/testapp for the resource to be protected

To install the Guard in your web application you have to merge the Guard's web.xml with your application's web.xml. This loads up the Guard when your application starts up.

Restart your servlet container and point your browser to:

http://localhost/samlengine/guanxi_sp

replacing "localhost" with your server's host name if appropriate. You should see the Guanxi SP page with a description of the SP. This page will tell you whether this SP is either an Engine, Guard or both.

Now point your browser to:

http://localhost/testapp/guanxi_sp

replacing "localhost" with your server's host name if appropriate. Again, you'll see how this SP is configured.

Depending on whether you have an Engine or Guard, or both, you must now install the web services by clicking on the links:

"Install the Guanxi Service Provider Engine web service"
"Install the Guanxi Service Provider Guard web service"

That's it. The Engine and Guard are now installed.

Configuration
------------------
Before you can use the Engine and Guard you have to configure them. These sections will tell you how to do it.

Configuring the Guard
----------------------------
During installation you should have merged the Guard's web.xml with your application's web.xml, so you should have a filter mapping for an example resource:

<filter-mapping>
    <filter-name>Guanxi Resource Guard</filter-name>
    <url-pattern>/protected/*</url-pattern>
</filter-mapping>

The above example will tell the Guard to enter Shibboleth mode whenever someone tries to access a resource at http://localhost/testapp/protected/.

To add other Shibboleth protected areas of your application, just add another <filter-mapping> for each area. For example, if you have an important area of your site , http://localhost/testapp/importantinfo/ that contains information for members of a special group only, add the filter mapping to your web.xml:

<filter-mapping>
    <filter-name>Guanxi Resource Guard</filter-name>
    <url-pattern>/importantinfo/*</url-pattern>
</filter-mapping>

The Guanxi Guard will now protect everything under http://localhost/testapp/importantinfo/

The next step in configuring the Guard is to tell it where your site is. Open the file WEB-INF/config/guanxi-sp-guard.xml:

<GuardInfo>
    <HostName>somewhere.on.the.net</HostName>
    <ID>666</ID>
</GuardInfo>

The <GuardInfo> section describes your Guard. Set <HostName> to the name of your web application's domain, such as www.testapp.org. The <ID> has to match metadata at the Engine or the Engine will refuse to communicate with your Guard. The ID should be pre-configured, so do not change.

<Cookie>
    <Domain>.uni.ac.uk</Domain>
    <Path>/</Path>
    <Age units="seconds">30</Age>
</Cookie>

Modify the Cookie setting to your liking. The cookie controls the length of the Shibboleth session that the Guard sets up. If you only want a short interval for Shibboleth users on your site, you can use the default of 30 seconds! The "units" can be "seconds", "minutes" or "hours". Assuming your application is at www.testapp.org, set the Domain to testapp.org

<EngineInfo>
    <WSDL>http://localhost/guanxi_sp/services/GuanxiEngineService?wsdl</WSDL>
    <AuthConsumerURL>https://localhost/samlengine/engine.guanxiEngineAuthCS</AuthConsumerURL>
    <WAYFMethod>getWAYFLocation</WAYFMethod>
    <Timeout>10</Timeout>
</EngineInfo>

The <EngineInfo> section tells your Guard where it's Engine is. This should be pre-configured so do not change.

That's it. You're now ready to use the Guard to protect your web application.

Configuring the Engine
-----------------------------
The Engine is rather more complex to configure than the Guard as it has to deal with external entities in a federation such as the WAYF and IdPs, as well as manage trust relationships with it's Guards. To do all this, the Engine has the structure:

WEB-INF
-- config
---- aa
---- certs
---- guards

Let's configure the Engine to work with a particular Guard.

There's an example file you can modify : WEB-INF/config/guards/666.xml

This is a Guard descriptor file that uses the SAML2 Metadata format. You'll notice in:

<EntityDescriptor xmlns="urn:oasis:names:tc:SAML:2.0:metadata"
                  xmlns:gxmeta="urn:guanxi:metadata"
                  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"
                 entityID="666">

the entityID is what identifies this Guard. This is the value of the Guard's ID in it's guanxi-sp-guard.xml file. When a Guard calls the Engine's WAYF location web service, to set up a security session and obtain the location of the WAYF at the start of a Shibboleth session, the Engine will take the Guard's ID and look through it's loaded Guard metadata to see if has a trust relationship with that Guard. It uses the entityID above to find the Guard's metadata.

<Extensions>
      <GuanxiGuardService xmlns="urn:guanxi:metadata">
        <VerifierURL>http://localhost/webappname/services/GuanxiGuardVerificationService</VerifierURL>
        <AttributeConsumerServiceURL>http://localhost/webappname/guard.guanxiGuardACS</AttributeConsumerServiceURL>
        <PodderURL>http://localhost/webappname/guard.guanxiGuardPodder</PodderURL>
      </GuanxiGuardService>
</Extensions>

Once the Engine locates the Guard's metadata, the <GuanxiGuardService> element will tell it all it needs to know about the Guard. The <VerifierURL> tells it the location of the Guard's web service that the Engine will use to perform security checks before trusting the Guard. The <AttributeConsumerServiceURL> is where the Engine will send the attributes once it gets them from an AA. The <PodderURL> is where the Engine will redirect to at the end of a Shibboleth session.

For the first release of the SP, you can safely ignore everything else in the file!

To configure the Engine to trust an IdP, you must modify the example file at WEB-INF/config/aa/GUANXI--714723926.xml

When an IdP sends it's reply to the Engine, the Engine will verify the digital signature from the IdP and then use it's identity to load up it's Attribute Authority (AA) information from the Engine's metadata store. The name of the file in WEB-INF/config/aa must match the IdP's Shibboleth providerId.

<EntityDescriptor xmlns="urn:oasis:names:tc:SAML:2.0:metadata"
                  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"
                entityID="GUANXI--714723926">

entityID is the providerId of the IdP.

<KeyDescriptor use="signing">
      <ds:KeyInfo>
        <ds:KeyName>GUANXI--714723926.crt</ds:KeyName>
      </ds:KeyInfo>
</KeyDescriptor>

The <KeyName> is the name of the file in WEB-INF/config/certs that the Engine must load to verify the IdP.

<AttributeService Binding="" Location="http://localhost/guanxi/AA" />

This tells the Engine where to go to get attributes from the IdP's AA.

Logging
-----------
The SP Engine and Guard will log to the directory WEB-INF/logs.

More information
-----------------------
If you have any comments, ideas or suggestions, drop us a note on the Guanxi mailing list, which you can join at the Guanxi sourceforge site:

http://sourceforge.net/projects/guanxi.

Alternatively you can read more documentation and post comments on the Guanxi Wiki:

http://guanxi.uhi.ac.uk/xwiki

or catch up with the latest Guanxi development gossip on the Guanxi blog:

http://www.weblogs.uhi.ac.uk/sm00ay/index.php?cat=2



