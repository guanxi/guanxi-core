Guanxi::IdP

This document describes how to get hold of the Guanxi Identity Provider (IdP), in binary form or build it from source and configure it.

Last updated for IdP V-1_2_5_Rabbie.

Contents
  o What is the IdP?
  o Getting a binary distribution
  o Building from source
  o Installation
  o Configuration
  o   What certificates are needed?
  o   Setting up the example certificate
  o   Configuring the core IdP
  o   Configuring the LDAPAuthenticator
  o   Configuring the LDAPAttributor
  o   Configuring Attribute Release Policies (ARPs)
  o   Configuring Attribute Maps
  o Logging
  o How to embedd the IdP in your application
  o An embedded example. The Bodington VLE as Shibboleth compatible IdP
  o More information
  
What is the IdP?
--------------------------
The IdP is your Identity Provider. When you try to access a resource at another site that is protected by a Service Provider, it's the IdP's job to get you authenticated, to provde that you are indeed a member of your institution and then to release attributes about you to the Service Provider. Based upon these attributes, the Service Provider can grant or deny you access to the resource. Your privacy can be preserved by use of the IdP's Attribute Release Policy (ARP) which controls which attributes are released to which Service Providers, or if at all.

Getting a binary distribution
------------------------------------
You can get a binary distribution, i.e. you don't have to build from source, from the Guanxi sourceforge site:
http://sourceforge.net/projects/guanxi
Click on the "Download Guanxi" button and then click on "guanxi" Package under Latest File Releases. You'll now see a list of the Guanxi components available for download.
Click on the guanxi-idp-bin-xxx.tar.gz file, where xxx will be the latest version number of the IdP binary release.
Choose your mirror and the Guanxi IdP will be downloaded to your computer.
Uncompress the file and jump over the next section, to the installation notes.

Building from source
---------------------------
You can get the Guanxi source distribution from the Guanxi sourceforge CVS server. In a command shell, you should
enter the following commands:

cvs -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/guanxi login
cvs -z3 -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/guanxi co -P guanxi

when prompted for a password, just hit the enter key. You don't need one for anonymous access.

This will create a directory named guanxi, which has the following structure:

guanxi
-- CVS    : CVS information. This is only for versioning and is not used by the guanxi source code.
-- Common : The Guanxi Common module. This provides functionality that the other modules make use of.
-- Core   : The Guanxi Core module. This contains localised strings and XML schema files.
-- IdP    : The Guanxi Identity Provider.
-- SP     : The Guanxi Service Provider.
-- WAYF   : The Guanxi WAYF.
-- gx_lib : This directory contains all the JAR files required by the Guanxi modules. It's included as a convenience.
-- samuel : The Guanxi SAML toolkit.

To build the IdP from source, change to the Core directory and enter the command:

ant idp

This will build the IdP and put the files in guanxi/IdP/dist/webapp.

Installation
---------------
Once you've either downloaded the binary distribution or built the IdP from source, you should copy the files,
from either the binary directory or guanxi/IdP/dist/webapp to your servlet container's webapp root directory.
The example uses:

/WWW/idp

Restart your servlet container and point your browser to:

http://localhost/idp

replacing "localhost" with your server's host name if appropriate.
There's no root index file as the IdP can be embedded in a web application to turn that application into a
Shibboleth compatibie Identity Provider. You should go into the guanxi IdP's directory to see the IdP information:

http://localhost/idp/guanxi_idp

Here you'll find some information on what the IdP is and what you must do to get it started.

Configuration
------------------
Configuring the IdP involves first creating an X509 Certificate and a keystore in which to store it.
Then you must tell the IdP which Service Providers to trust. If you don't tell the IdP about an SP
then the IdP will refuse to communicate with that SP. This stops arbitrary SPs from contacting your
IdP and requesting attributes about you.
After that you must configure an Authenticator. An Authenticator is a module that communicates with a
backend authentication system. One Authenticator is provided with the IdP, the LDAPAuthenticator,
which lets your IdP authenticate you against any LDAP compatible authentication store, such as openLDAP,
Novell eDirectory or Microsoft Active Directory.
Next you must configure an Attributor, which is a module that communicates with a backend attribute store.
One Attributor is provided with the IdP, the LDAPAttributor, which lets the IdP gather attibutes about you
from a backend attribute store such as openLDAP, Novell eDirectory or Microsoft Active Directory.
The next step is to configure the Attribute Release Policy for an Attributor.

What certificates are needed?
----------------------------------------
The IdP will need two types of certificates. One to protect the communication with a Service Provider (SP),
which is the HTTPS connection (SSL). This is usually your server's web server certificate from somoeone such
as Thawte or Verisign. It's a root certificate proving that your server is indeed who it says it is,
i.e. www.idp.uni.ac.uk.
The other type of certificate is used by the IdP to sign SAML attribute assertions that it sends to an SP.
The SP will need a copy of this certificate to verify your IdP's digital signature. It's the second type of
certificate that you'll most probably need to create from scratch, so the IdP can create a test one for you.

Setting up the example certificate
---------------------------------------------
Before you can use your IdP in a federation, all Service Providers (SP)s that will communicate with your IdP
will want to have a copy of your IdP's X509 Certificate. This is the certificate that the IdP uses to sign
attribute assertions about you when it sends them to an SP. Creating X509s is not easy so the IdP will create
a test certificate for you, which you can use for a limited period of time to get you up and running in a federation.
Point your browser to:

http://localhost/idp/guanxi_idp

You should see message saying the IdP has not yet been set up. Click on the
"Click here to set up the Guanxi Identity Provider" link.
You should see the "Setup complete" page.

You should now have the following files:

WEB-INF/guanxi_idp/keystore
-- guanxi_idp.jks
-- guanxi_idp_cert.txt

guanxi_idp.jks is the auto created keystore that contains your IdP's test private key for signing attribute
assertions and guanxi_idp_cert.txt is your IdP's X509 certificate. It's this that you copy/paste into the
Internet2 Shibboleth SP.

The following file will also have been modified to use the test certificate and keystore:

WEB-INF/guanxi_idp/config/idp.xml

You're now ready to configure the core IdP.

Configuring the core IdP
---------------------------------
The core IdP is controlled via the file:

WEB-INF/guanxi_idp/config/idp.xml

which tells the IdP which SPs it can communicate with. It also tells the IdP which keys to use when signing
attribute assertions for SPs. It also tells the IdP which identity to use when communicating with an SP.
So let's see how to set up this file:

<service-provider creds="genericCreds" identity="genericIdentity" name="GENERIC"/>

Each SP that the IdP is willing to communicate with requires a <service-provider> element with the following attributes:
"identity" = The identity the IdP must use when communicating with that SP.
"creds" = The security credentials that the IdP must use when communicating with that SP.
"name" = This is the name that the SP uses to identity itself in a federation, i.e. the Shibboleth providerId.

The IdP will examine the providerId of a Shibboleth SP when the SP contacts the IdP and will try to match it
with any <service-provider> elements the IdP has in idp.xml. The IdP will then know how to identity itself to
the SP and also how to sign attribute assertions for that SP.

In the above example, the identity attribute points to an <identity> element which has the name "genericIdentity":

<identity name="genericIdentity">
  <issuer>GUANXI--1194634859</issuer>
  <name-qualifier>GUANXI--1194634859</name-qualifier>
</identity>

This is a block of identity information for the IdP when communicating with a particular SP. It has the following
elements:

<issuer>
Effectively the Shibboleth providerId of the IdP.
This corresponds to the X509 certificate auto generated in the "Setting up the example certificate" section.

<name-qualifier>
Same as <issuer>.

In the <service-provider> example above, you can see that the "creds" attribute points to a <creds> element
which has the name "genericCreds":

<creds name="genericCreds">
  <keystore-type>jks</keystore-type>
  <keystore-file>/WWW/guanxi_idp/WEB-INF/keystore/guanxi_idp.jks</keystore-file>
  <keystore-password>884122451</keystore-password>
  <private-key-alias>idp</private-key-alias>
  <private-key-password>884122451</private-key-password>
  <certificate-alias>idp</certificate-alias>
  <key-type>dsa</key-type>
</creds>

This is a block of security credential information for the IdP when communicating with a particular SP.
It has the following elements:

<keystore-type> = The keystore type to use to store the private signing key. Must be jks.
<keystore-file> = The fully qualified path and filename of the keystore file.
<keystore-password> = The password to open the keystore.
<private-key-alias> = The name of the private signing key's alias in the keystore.
<private-key-password> = The password to access the private signing key in the keystore.
<certificate-alias> = The name of the X509 Certificate's alias in the keystore. This contains the IdP's public certificate and it's this that's in WEB-INF/keystore/guanxi_idp_cert.txt. SPs must have a copy of this certificate.
<key-type> = The type of the private signing key, either dsa or rsa.

Using a combination of <identity> and <creds> you can support a wide range of Service Providers using
the <service-provider> element.

Now that the core IdP is configured, you must continue to the backend configuration for authentication.

Configuring the LDAPAuthenticator
-----------------------------------------------
The IdP comes with a default LDAPAuthenticator which is already registered with the IdP via the file:

WEB-INF/guanxi_idp/config/authenticators/authenticators.xml

<authenticators xmlns="urn:guanxi:idp">
  <authenticator type="org.guanxi.idp.authenticators.LDAPAuthenticator" />
</authenticators>

For each authenticator that you implement, add a new <authenticator> element with the following attribute:

"type" = The fully qualified class name of the authenticator. This class must be somewhere on your CLASSPATH
for the IdP to load it and use it.

To configure the LDAPAuthenticator, you must modify the file:

WEB-INF/guanxi_idp/config/authenticators/LDAPAuthenticator.xml. The file is fully commented so we'll delegate configuration
information to the file itself as it's self explanatory.

Configuring the LDAPAttributor
------------------------------------------
The IdP comes with a default LDAPAttributor which is already registered with the IdP via the file:

WEB-INF/guanxi_idp/config/attributors/attributors.xml

<attributors xmlns="urn:guanxi:idp">
  <attributor type="org.guanxi.idp.attributors.LDAPAttributor" />
</attributors>

For each attributor that you implement, add a new <attributor> element with the following attribute:

"type" = The fully qualified class name of the attributor. This class must be somewhere on your CLASSPATH for
the IdP to load it and use it.

To configure the LDAPAttributor, you must modify the file:

WEB-INF/guanxi_idp/config/attributors/LDAPAttributor.xml. The file is fully commented so we'll delegate configuration
information to the file itself as it's self explanatory.

Configuring Attribute Release Policies (ARPs)
--------------------------------------------------------------
Each Attributor has it's own ARP, telling it whether or not it can release an attribute to a particular SP.
We'll describe how to configure an ARP in the context of the LDAPAttributor as the ARP syntax is the same
for all Attributors.

The LDAPAttributor's ARP is in the file:

WEB-INF/guanxi_idp/config/attributors/LDAPAttributorARP.xml

<arp xmlns="urn:guanxi:idp">
  <bag name="global">
    <attribute name="*" value="*" />
  </bag>
  
  <bag name="eDir">
    <attribute name="sn" value="*" />
    <attribute name="cn" value="*" />
  </bag>
  
  <provider name="urn:mace:eduserv.org.uk:athens:federation:uk">
    <allow>Athens</allow>
    <deny>global</deny>
  </provider>
</arp>

The idea is that you can define a <bag> of attributes which can be a collection of related attributes or just
a global bag that corresponds to all attributes that can be gathered for a user:

<bag name="global">
  <attribute name="*" value="*" />
</bag>

In the above example, we've defined a bag named "global". You call the bag anything you like.
Here we've called it "global" as it relates to all attributes for a user.
It contains just one <attribute> element:

<attribute name="*" value="*" />

with the attributes:

name = The name of the user's attribute, e.g. eduPersonTargetedID, or * for any attribute
value = The value of the user's attribute, e.g. uni.ac.uk or * for any value

In the above example the "global" bag contains all attributes as we've set name and value to "*".

Let's define another, more restricted bag:

<bag name="eDir">
  <attribute name="sn" value="*" />
  <attribute name="cn" value="*" />
</bag>

Here we've defined an "eDir" bag which holds the eDirectory attributes "sn" and "cn".
These may hold sensitive information on a user so rather than reference them through
the "global" bag, we've put them in a smaller bag as we're going to deny their release.
To do this, we need to define a <provider> through which we can reference bags of attributes:

<provider name="some:dodgy:sp">
  <allow>global</allow>
  <deny>eDir</deny>
</provider>

The above example defines a Service Provider with a providerId of "some:dodgy:sp".
Guanxi Attributors will use <provider> elements to check whether they can release
attributes to that SP, based on the SP's providerId. In the above case, an Attributor
will release all attributes to the "some:dodgy:sp" except the user's "sn" and "cn".

Let's take a real world example now, of blocking all attributes except one:

<bag name="Athens">
  <attribute name="userRole" value="*" />
</bag>

<provider name="urn:mace:eduserv.org.uk:athens:federation:uk">
  <allow>Athens</allow>
  <deny>global</deny>
</provider>

The above says, to the SP identified by "urn:mace:eduserv.org.uk:athens:federation:uk",
which is the UK Athens Shibboleth Gateway, deny all attributes except what's in the Athens bag,
i.e. userRole.

userRole is a user's permission set for an Athens account but it may not be a real attribute in
the institution's attribute store. So how can it be released if it doesn't exist? That's where
Attribute Maps come in. Read on.

Configuring Attribute Maps
------------------------------------
In the above ARP example, we saw that only the userRole attribute can be released to Athens.
However, our backend store doesn't have a userRole attribute for any user. So, we can construct
one on the fly using an Attribute Map.
Each Attributor has it's own ARP, telling it how to transform or map attributes and their values
into other attributes. We'll describe how to configure a map in the context of the LDAPAttributor
as the map syntax is the same for all Attributors.

<AttributeMap xmlns="urn:guanxi:idp">
  <map info="eduserve userRole mapper"
            attrName="dn"
            attrValue=".*(S|s)taff.*"
            mappedName="userRole"
            mappedValue="54ksdf84" />
</AttributeMap>

For each attribute you want to map, just provide a <map> element with the following attributes:

info = An informational name for the map, to remind you what it does.
attrName = The name of the attribute to be mapped. Can be the attribute name or a regex or just *.
attrValue = The value of the attribute to be mapped. Can be a specific attribute value or a regex or just *.
mappedName = The name of the new attribute.
mappedValue = The value for the new attribute.

In the above example, an Attributor, when it comes across a user's "dn" attribute, will use the map
to check if they are, in effect, a member of staff using the regex which will match things like:

cn=mycn,ou=dept,ou=staff,o=uni
cn=mycn,ou=dept,ou=Staff,o=uni

If the regex for attrName matches, i.e. they're staff, then the dn attribute will be mapped to the
userRole attribute with a value of 54ksdf84.

So what happens is the Attributor passes the dn attribute through the map and out comes the original
dn attribute as well as a newly created userRole attribute with a specific value.

It's important to note that the Map must be done before going through the ARP as mapped attributes can
be put in an ARP to block their release.

Logging
-----------
The IdP will log, by default, to the directory WEB-INF/logs. If you want it to log somewhere else,
just change the directory in WEB-INF/web.xml:

<context-param>
  <param-name>log-dir</param-name>
  <param-value>WEB-INF/logs</param-value>
</context-param>

If the value of <param-value> starts with a leading slash then the IdP will use the fully qualified
path to the log directory:

<param-value>/var/log/guanxi</param-value>

otherwise it will look for the log direcotory relative to the WEB-INF directory:

<param-value>WEB-INF/logs</param-value>

For each Guanxi IdP component, SSO, AA, you can change the name of the logfile by looking for it in WEB-INF/web.xml:

<servlet>
  ...
  <init-param>
    <param-name>log-file</param-name>
    <param-value>guanxi-sso.log</param-value>
  </init-param>
  ...
</servlet>

With the following combination of <context-param> and <servlet> logging settings:

<context-param>
  <param-name>log-dir</param-name>
  <param-value>WEB-INF/logs</param-value>
</context-param>

<servlet>
  <servlet-name>SSO</servlet-name>
  <init-param>
    <param-name>log-file</param-name>
    <param-value>guanxi-sso.log</param-value>
  </init-param>
  ...
</servlet>

the IdP's SSP component will log to WEB-INF/logs/guanxi-sso.log

How to embedd the IdP in your application
---------------------------------------------------------

An embedded example. The Bodington VLE as Shibboleth compatible IdP
---------------------------------------------------------------------------------------------------

More information
-----------------------
If you have any comments, ideas or suggestions, drop us a note on the Guanxi mailing list, which you can join at the Guanxi sourceforge site:

http://sourceforge.net/projects/guanxi.

Alternatively you can read more documentation and post comments on the Guanxi Wiki:

http://guanxi.uhi.ac.uk/xwiki

or catch up with the latest Guanxi development gossip on the Guanxi blog:

http://www.weblogs.uhi.ac.uk/sm00ay/index.php?cat=2



